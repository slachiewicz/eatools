package no.eatools.diagramgen;

import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

import no.bouvet.ohs.args4j.HelpProducer;
import no.bouvet.ohs.args4j.UsageHelper;
import no.bouvet.ohs.futil.ResourceFinder;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.kohsuke.args4j.Argument;
import org.kohsuke.args4j.Option;

import static no.eatools.util.EaApplicationProperties.*;

/**
 * Utility to be used from the command line to output all diagrams in an EA repo
 * with logical filenames, i.e. the name used in the model, instead of the arbitrary
 * name generated by EA when using its 'HTML Report' function.
 *
 * @author Per Spilling (per.spilling@objectware.no)
 */
public class EaDiagramGenerator implements HelpProducer {
    public static final String PROPERTY_FILE = "propertyFile";
    static Log log = LogFactory.getLog(EaDiagramGenerator.class);

    @Option(name = "-h", usage = "show help")
    private boolean help = false;

    @Option(name = "-r", usage = "create relationships of package", metaVar = "package")
    private String pack = "";

    @Option(name = "-n", usage = "create url for result file only")
    private boolean urlForFileOnly = false;

    @Option(name = "-p", usage = "Property override [property]=[new value],... ", metaVar = "list of key, value pairs")
    private Map<String, String> propertyMap = new HashMap<String, String>();

//    private File inputFile = new File(DEFAULT_FILE_STEM + INPUT_EXTENSION);

    @Argument(metaVar = PROPERTY_FILE, usage = "property file. If omitted standard file is looked for:", index = 0, required = false)
    private String propertyFilename;

    private final UsageHelper usageHelper = new UsageHelper(this);

//    @Option (name = )
//    static {
//        try {
////            System.load("C:/chilkatJava/chilkat.dll");
//            System.out.println("*******************************");
//        } catch (UnsatisfiedLinkError e) {
//            System.err.println("Native code library failed to load.\n" + e);
//            System.exit(1);
//        }
//    }

    @Argument(metaVar = "diagram", usage = "diagram name or number. If omitted, all diagrams are generated", index = 1, required = false)
    private String diagram;

    public static void main(String[] args) {
        new EaDiagramGenerator().doMain(args);
    }

    private void doMain(String[] args) {
        try {
            System.out.println(ResourceFinder.findFile("version.txt"));
            System.out.println(ResourceFinder.findFile("log4j.xml"));
            ClassLoader classLoader = getClass().getClassLoader();
            File file = new File(classLoader.getResource("version.txt").getFile());
            for (String versionLine : FileUtils.readLines(file)) {
                System.out.println(versionLine);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        usageHelper.parse(args);
        String property = System.getProperty("java.library.path");
        StringTokenizer parser = new StringTokenizer(property, ";");
        while (parser.hasMoreTokens()) {
            System.err.println(parser.nextToken());
        }

        log.debug(propertyMap);

        EaRepo eaRepo = null;
        try {
            init(propertyFilename, propertyMap);

            File modelFile = new File(EA_PROJECT.value());
            eaRepo = new EaRepo(modelFile);
            System.out.println(new Date());
            eaRepo.open();
            System.out.println(new Date());

            if (StringUtils.isNotBlank(pack)) {
                EaPackage eaPackage = new EaPackage(pack, eaRepo);
                eaPackage.generatePackageRelationships();
                return;
            }
            if (!EA_DIAGRAM_TO_GENERATE.value().equals("") || diagram != null) {
                generateSpecificDiagram(eaRepo);
            } else {
                // generate all diagrams
                int count = EaDiagram.generateAll(eaRepo);
                log.info("Generated " + count + " diagrams");
            }
            eaRepo.close();
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e);
            String msg = "An error occurred. This might be caused by an incorrect diagramgen-repo connect string.\n" +
                    "Verify that the connect string in the ea.application.properties file is the same as\n" +
                    "the connect string that you can find in Enterprise Architect via the File->Open Project dialog";
            System.out.println(msg);
        } catch (Throwable t) {
            System.err.println("An error occurred " + t);
        } finally {
            if (eaRepo != null) {
                eaRepo.close();
            }
        }
    }

    private void generateSpecificDiagram(EaRepo eaRepo) {
        String diagramName;
        if (StringUtils.isNotBlank(diagram)) {
            diagramName = diagram;
        } else {
            diagramName = EA_DIAGRAM_TO_GENERATE.value();
        }
        EaDiagram diagram;
        if (StringUtils.isNumeric(diagramName)) {
            int diagramId = Integer.parseInt(diagramName);
            diagram = EaDiagram.findDiagramById(eaRepo, diagramId);
        } else {
            diagram = EaDiagram.findDiagram(eaRepo, diagramName);
        }
        if (diagram != null) {
            diagram.writeImageToFile(urlForFileOnly);
        } else {
            log.info("diagram '" + diagramName + "' not found");
        }
    }

    @Override
    public boolean isInHelp() {
        return help;
    }
}
